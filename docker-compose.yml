services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    ports:
      - ${PORT}:${PORT}
    environment:
      APP_ENV: ${APP_ENV}
      PORT: ${PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
    command: /app/main
    depends_on:
      psql_bp:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - blueprint
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
      args:
        - VITE_ENV=${VITE_ENV}
        - VITE_BACKEND_URL_PROD=${VITE_BACKEND_URL_PROD}
        - VITE_BACKEND_URL_DEV=${VITE_BACKEND_URL_DEV}
    environment:
      - VITE_ENV=${VITE_ENV}
      - VITE_BACKEND_URL_PROD=${VITE_BACKEND_URL_PROD}
      - VITE_BACKEND_URL_DEV=${VITE_BACKEND_URL_DEV}
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - 5173:5173
    networks:
      - blueprint
  psql_bp:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_SCHEMA: ${DB_SCHEMA}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - psql_volume_bp:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}'"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - blueprint
  migrate:
    image: postgres:latest
    depends_on:
      psql_bp:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
      - ./init-db.sh:/init-db.sh
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_SCHEMA: ${DB_SCHEMA}
      DB_HOST: psql_bp
      DB_PORT: 5432
    command: bash -c "chmod +x /init-db.sh && /init-db.sh"
    networks:
      - blueprint
  ingest:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: no
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
    volumes:
      - ./raw_data:/app/raw_data
    command: /app/ingest
    depends_on:
      psql_bp:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - blueprint
    logging:
      driver: json-file
      options:
        max-size: 200k
        max-file: 10
volumes:
  psql_volume_bp:
networks:
  blueprint:
